name: Posts
description: |-

  APIs for posts.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/posts
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of the posts.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      page:
        name: page
        description: 'The page number for pagination.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of results per page. Defaults to 10.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      search:
        name: search
        description: 'Search term to filter blog posts.'
        required: false
        example: Laravel
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'tags[]':
        name: 'tags[]'
        description: 'Array of tags slug to filter posts.'
        required: false
        example: 'tags[]=laravel&tags[]=php'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      page: 1
      per_page: 10
      search: Laravel
      'tags[]': 'tags[]=laravel&tags[]=php'
    bodyParameters:
      page:
        name: page
        description: 'The page number for pagination. Must be at least 1.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of results per page. Defaults to 10. Must be at least 1. Must not be greater than 100.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      search:
        name: search
        description: 'Search term to filter blog posts.'
        required: false
        example: Laravel
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      tags:
        name: tags
        description: 'Filter blog posts based on tags. The <code>slug</code> of an existing record in the tags table.'
        required: false
        example:
          - tag-1
          - tag-2
          - tag-3
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      page: 2
      per_page: 5
      search: Laravel
      tags:
        - tag-1
        - tag-2
        - tag-3
    fileParameters: []
    responses:
      -
        status: 422
        content: '{"success":false,"message":"The selected tags is invalid.","errors":{"tags":["The selected tags is invalid."]}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/posts/{slug}'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified post.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      slug:
        name: slug
        description: 'The slug of the post.'
        required: true
        example: 13
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      slug: 13
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"success":false,"message":"Resources not found"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/posts/{post_slug}/comments'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get comments for a specific post.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      post_slug:
        name: post_slug
        description: 'The slug of the post.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      post_slug: 2
    queryParameters:
      page:
        name: page
        description: 'The page number for pagination.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of results per page. Defaults to 10.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      page: 1
      per_page: 10
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"success":false,"message":"Resources not found"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aehvd4aV5ckE68f6Pbg1D3Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/posts/store
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created post in storage.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the post. Must not be greater than 255 characters.'
        required: true
        example: 'A Sample Blog Post'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      content:
        name: content
        description: 'The  content of the post.'
        required: true
        example: 'This is the body of the blog post.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'An array of tag IDs associated with the post. The <code>id</code> of an existing record in the tags table.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      image:
        name: image
        description: 'A single image file to be used as the main image for the post. Must be a file. Must not be greater than 5120 kilobytes.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      gallery:
        name: gallery
        description: 'Each file in the gallery. Allowed formats are images (jpg, png) or videos (mp4, avi, mov). Must be a file. Must not be greater than 10240 kilobytes.'
        required: false
        example: null
        type: 'file[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'A Sample Blog Post'
      content: 'This is the body of the blog post.'
      tags:
        - 1
        - 2
        - 3
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer DV3EevafZ8gk6d4acbP61h5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/posts/{slug}/update'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update post.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      slug:
        name: slug
        description: 'The slug of the post.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      slug: 10
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the post. Must not be greater than 255 characters.'
        required: true
        example: 'A Sample Blog Post'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      content:
        name: content
        description: 'The  content of the post.'
        required: true
        example: 'This is the body of the blog post.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'An array of tag IDs associated with the post. The <code>id</code> of an existing record in the tags table.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      image:
        name: image
        description: 'A single image file to be used as the main image for the post. Must be a file. Must not be greater than 5120 kilobytes.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      gallery:
        name: gallery
        description: 'Each file in the gallery. Allowed formats are images (jpg, png) or videos (mp4, avi, mov). Must be a file. Must not be greater than 10240 kilobytes.'
        required: false
        example: null
        type: 'file[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'A Sample Blog Post'
      content: 'This is the body of the blog post.'
      tags:
        - 1
        - 2
        - 3
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6dkPf1bg6aEV5cahveZ3D84'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/posts/{slug}/destroy'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a specific post.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      slug:
        name: slug
        description: 'The slug of the post.'
        required: true
        example: 18
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      slug: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E643dgPfbV8a1hZck6eaD5v'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/posts/{post_slug}/comments/add'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Add a comment to specified post.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      post_slug:
        name: post_slug
        description: 'The slug of the post.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      post_slug: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      content:
        name: content
        description: 'The content of the comment.'
        required: true
        example: 'This is a great post!'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      content: 'This is a great post!'
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer g86Pkahc41ab6V5vEde3fZD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/posts/{post_slug}/uploads/{upload_ref}/remove'
    metadata:
      groupName: Posts
      groupDescription: |-

        APIs for posts.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a specific file from a post.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      post_slug:
        name: post_slug
        description: 'The slug of the post.'
        required: true
        example: 6
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      upload_ref:
        name: upload_ref
        description: ''
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      post_slug: 6
      upload_ref: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f6Vkgva3hDa4EecZ1P68b5d'
    controller: null
    method: null
    route: null
    custom: []
